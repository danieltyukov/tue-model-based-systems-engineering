type priority     = int;  // 0, 1, 2
type product      = tuple(int nr; priority prio);
type product_list = list product;

event product g_buf, buf_exit;


func product_list insert(product_list prods; product prod):
    // index of current position in list, starting at last product
    int i = size(prods) - 1;
    product_list new_prods = [];

    // Start i at the product at the end of the list.
    // Test whether the product can be inserted behind the product at position i.
    // If so, you are done,
    // if not, check if you are at the front of the list
    // if so, you are done,
    // if not, check if the product can be inserted before the product at position i.
    // If so, you are done,
    // if not, go to the next product in the direction of the front of the list

    while true:
        if size(prods) = 0:
            return [prod];
        elif prod[prio] >= prods[i][prio]:
            new_prods := prods + [prod];
            break;
        elif i = 0:
            new_prods := [prod] + prods;
            break;
        elif
            prod[prio] >= prods[i - 1][prio]:
            new_prods := prods[:i] + [prod] + prods[i:];
            break;
        else
            i := i - 1;
        end
    end

    return new_prods;
end

automaton generator:
	event new_sample;

	disc dist int dprio = uniform(0, 3);       // uniform dist ranging over 0, 1, 2
	disc priority prio;
	disc int nr;

	location draw_sample:
	   initial;
		edge new_sample         do (prio, dprio) := sample dprio  goto send;

	location send:
		edge g_buf ! (nr, prio) do nr := nr + 1                   goto draw_sample;


end

automaton buffer:
    disc list product prods = [];

    location:
        initial;
        edge g_buf?                                   do prods := insert(prods, ?);
        edge buf_exit ! prods[0] when size(prods) > 0 do prods := prods[1:];
end

automaton exit:
    disc list product prods = [];

    location:
        initial;
        edge buf_exit ? do prods := prods + [?];
end
