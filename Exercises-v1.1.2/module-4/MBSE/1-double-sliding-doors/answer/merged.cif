alg bool s_motion = 30 <= person.x and person.x <= 80;
alg bool a_door_left = controller.a_door_left;
alg bool a_door_right = controller.a_door_right;
uncontrollable u_person;
automaton controller:
  alg bool a_door_left = open;
  alg bool a_door_right = open;
  event opening;
  event closing;
  location closed:
    initial;
    edge opening when s_motion goto open;
  location open:
    edge closing when not s_motion goto closed;
end
automaton person:
  event reset;
  const real X_MIN = 0.0;
  const real X_MAX = 85.0;
  const real V_PERSON = 20.0;
  cont x = X_MIN;
  location waiting:
    initial;
    equation x' = 0.0;
    edge u_person goto walking;
  location walking:
    equation x' = V_PERSON;
    edge u_person;
    edge reset when x >= X_MAX do x := 0.0 goto waiting;
end
group slidingDoorLeft:
  const real X_MIN = -45.0;
  const real X_MAX = 0.0;
  const real V_DOOR = 30.0;
  cont x = X_MAX der v;
  alg real v = if a_door_left and x >= X_MIN: -V_DOOR elif not a_door_left and x <= X_MAX: V_DOOR else 0.0 end;
end
group slidingDoorRight:
  const real X_MIN = 0.0;
  const real X_MAX = 45.0;
  const real V_DOOR = 30.0;
  cont x = X_MIN der v;
  alg real v = if a_door_right and x <= X_MAX: V_DOOR elif not a_door_right and x >= X_MIN: -V_DOOR else 0.0 end;
end
svgin id "person" event u_person file "sliding-doors2.svg";
svgout id "person" attr "display" value if person.x >= person.X_MAX - 5.0: "none" else "inline" end file "sliding-doors2.svg";
svgout id "s_motion" attr "fill" value if s_motion: "green" else "red" end file "sliding-doors2.svg";
svgout id "person" attr "transform" value fmt("translate(%s,0)", person.x) file "sliding-doors2.svg";
svgout id "sliding_door_left" attr "transform" value fmt("translate(%s,0)", slidingDoorLeft.x) file "sliding-doors2.svg";
svgout id "sliding_door_right" attr "transform" value fmt("translate(%s,0)", slidingDoorRight.x) file "sliding-doors2.svg";
