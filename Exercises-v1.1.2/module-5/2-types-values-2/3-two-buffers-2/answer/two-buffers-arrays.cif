type product = tuple(int nr; real weight; string color);

const product NOPROD = (-1, 0, "none"); // no product (empty product)

//This channel sends products
event product gen_b1, gen_b2;

automaton generator:
    disc list[3] product prods = [(1, 2.5, "red"), (2, 15, "blue"), (3, 0.8, "grey")];

    // number of products in the product list
    // index of first product is always 0
    // when prod_count = 0, the list is empty
    disc int prod_count = 3;

    location:
        initial;
        edge gen_b1 ! prods[0]
            when 0 < prod_count and buffer1.prod_count <= buffer2.prod_count
            do prods[0] := prods[1], prods[1] := prods[2], prods[2] := NOPROD
                         , prod_count := prod_count - 1 ;
        edge gen_b2 ! prods[0]
            when 0 < prod_count and buffer1.prod_count >= buffer2.prod_count
            do prods[0] := prods[1], prods[1] := prods[2], prods[2] := NOPROD
                         , prod_count := prod_count - 1 ;
end

//
automaton buffer1:
    disc list[3] product prods = [NOPROD, NOPROD, NOPROD];
    disc int prod_count = 0;

    location:
        initial;
        edge gen_b1 ? when prod_count <= 1 do prods[prod_count] := ?
                                            , prod_count := prod_count + 1;
end

automaton buffer2:
    type product2 = tuple(int nr; string color);

    // local (re)definition of empty product
    const product2 NOPROD = (-1, "none");

    disc list[3] product2 prods = [NOPROD, NOPROD, NOPROD];
    disc int prod_count = 0;

    location:
        initial;
        // Receive new product,
        // construct a new tuple consisting of nr and color of the received product,
        // and put the new tuple at the end of the list prods.
        edge gen_b2 ?   when prod_count <= 1
                        do prods[prod_count] := (?[nr], ?[color])
                                              , prod_count := prod_count + 1;
end
